
/* 
	For more on flexbox, I highly recommend "A Guide to Flexbox":
	http://css-tricks.com/snippets/css/a-guide-to-flexbox/

	PLEASE NOTE:
	A lot of the properties covered below work ONLY when you set
	display to flexbox. Make sure to understand when and where
	you can apply these properties by looking them up as necessary.
*/


/*
	With this selector, we are specifying that all objects use
	the border-box model (not the content-box model)
*/
*, *:after, *:before {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}



/*
	Here we are going to establish some rules for our 'box'
	which contains all the elements to be wrapped
*/
.box {
	/* Sets us into 'flexbox' mode */
	display: -webkit-flex; /* For support in a series of Webkit browsers */
	display: -ms-flex; /* For support in IE 10 */
	display: flex; 


	/* 
		The 'flex-wrap' property lets us automagically wrap 
		child elements that are too-wide for their current row
	 */
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap; 

	/* 
		'align-items' lets us control the vertical positioning
		of elements within a flexbox.

	*/
			-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;

}


.box-item-nav {
	/*
		Child elements of a flexbox can have 'flex-grow' applied
		to them, which assigns a 'weight' to the element in their
		current row. The higher the 'weight', the more width
		of the row that element will take up.
	*/
		-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;

	display: -webkit-flex;
	display: -ms-flexbox;
	display: flex;

	-webkit-flex-direction: column;
	-ms-flex-direction: column;
	flex-direction: column;
	margin-right: 0;
}



.box-item-article {
	-webkit-flex:1;
	-ms-flex:1;
	flex:1;
		-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;



	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;

	height: 100%;
}

.box-item-article-d {
	-webkit-flex: 1;
	-ms-flex:1;
	flex:1;
	-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;



		-webkit-align-self: space-between;
	-ms-align-self: space-between;
	align-self: space-between;

	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;


	height: 100%;
}

.box-item-article-c {
	-webkit-flex: 1;
	-ms-flex:1;
	flex:1;
	
	-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;

		-webkit-align-self: flex-end;
	-ms-align-self: flex-end;
	align-self: flex-end;



	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;


	height: 100%;
}
.box-item-article-a {
	-webkit-flex: 4;
	-ms-flex:4;
	flex:4;
			-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;

		-webkit-align-self: center;
	-ms-align-self: center;
	align-self: center;

	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;


	height: 100%;
}

.box-item-article-p {
	-webkit-flex: 4;
	-ms-flex:4;
	flex:4;

	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;



	-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;
	
}
.box-item-article-p-p {
	-webkit-flex: 3;
	-ms-flex:3;
	flex:3;


	-webkit-justify-content: center;
	-ms-justify-content: center;
	justify-content: center;
	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 10em;
	-ms-flex-basis: 10em;
	flex-basis: 10em;

}


.box-item-article-image {
	/*
		Child elements of a flexbox can have 'flex-grow' applied
		to them, which assigns a 'weight' to the element in their
		current row. The higher the 'weight', the more width
		of the row that element will take up.
	*/

	-webkit-flex-grow: 1;
	-ms-flex-grow: 1;
	flex-grow: 1;
	
	/*
		Because our image is rendered in pixels, it is acceptable
		to use pixels to set the base in this case.
	*/
	-webkit-flex-basis: 0px;
	-ms-flex-basis: 0px;
	flex-basis: 0px;
}

.box-item-article-image-a {
	/*
		Child elements of a flexbox can have 'flex-grow' applied
		to them, which assigns a 'weight' to the element in their
		current row. The higher the 'weight', the more width
		of the row that element will take up.
	*/

	-webkit-flex-grow: 1;
	-ms-flex-grow: 1;
	flex-grow: 1;
	
	/*
		Because our image is rendered in pixels, it is acceptable
		to use pixels to set the base in this case.
	*/
	-webkit-flex-basis: 0px;
	-ms-flex-basis: 0px;
	flex-basis: 0px;
}




.box-item-article-image img {
	width: 100%;
	max-width: auto;
}


.box-item-article-image-p {
	/*
		Child elements of a flexbox can have 'flex-grow' applied
		to them, which assigns a 'weight' to the element in their
		current row. The higher the 'weight', the more width
		of the row that element will take up.
	*/
	-webkit-flex-grow: 1;
	-ms-flex-grow: 1;
	flex-grow: 1;
	
	/*
		Because our image is rendered in pixels, it is acceptable
		to use pixels to set the base in this case.
	*/
	-webkit-flex-basis: 0px;
	-ms-flex-basis: 0px;
	flex-basis: 0px;
}


.box-item-article-image-p img {
	width: 100%;
	max-width: auto;
}

.box-item-article-image-p-p img {
	width: 100%;
	max-width: auto;
}

.box-item-article-image-p img {
	width: 100%;
	max-width: auto;
}

@media (max-width: 30em) {
	/*
		Just as before, we can use media queries to apply different
		styles at specific sizes 
	*/
	.box-item-article-image {
		/*
			The flexbox 'order' attribute lets us re-order items
			as they are flowed. Smaller values position items closer
			to the top, or to the left, higher values place them near
			the end, or to the right.
		*/
		-webkit-order: 2;
		-ms-order: 2;
		order: 2;
	}

	.box-item-article-p {
	-webkit-flex: 1;
	-ms-flex:1;
	flex:1;

	/*
		'flex-basis' is the initial size of the flex item (sort of 
		a minimum dimension) before any flexbox is applied
	*/
	-webkit-flex-basis: 15em;
	-ms-flex-basis: 15em;
	flex-basis: 15em;
}
}


.box-item-article-text {
	margin-left: 1em;

	-webkit-flex-grow: 2;
	-ms-flex-grow: 2;
	flex-grow: 2;

	/*
		'flex-shrink' tells the flexbox that it is ok to shrink this
		item when the screen is too small to accomodate it at the
		specified 'grow' size
	*/
	-webkit-flex-shrink: 1;
	-ms-flex-shrink: 1;
	flex-shrink: 1;

	-webkit-flex-basis: 20em;
	-ms-flex-basis: 20em;
	flex-basis: 20em;
}

